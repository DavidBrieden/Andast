(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var App = {};

App.init = function () {
    this.canvas = document.getElementById("canvas");
    this.canvas.width = 800;
    this.canvas.height = 600;
    this.ctx = this.canvas.getContext("2d");
};

module.exports = App;

},{}],2:[function(require,module,exports){
"use strict";

var boxes = [];

// X
//XXX
boxes.push([{ x: -1, y: 0 }, { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }]);
//XX
// XX
boxes.push([{ x: -1, y: 1 }, { x: 0, y: 1 }, { x: 0, y: 0 }, { x: 1, y: 0 }]);
//XX
//XX
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]);
//X
//X
//X
//X
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }, { x: 0, y: -1 }]);
//X
//X
//XX
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: -1 }]);
// XX
//XX
boxes.push([{ x: -1, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]);

module.exports = boxes;

},{}],3:[function(require,module,exports){
"use strict";

var App = require("./App.js");

var Field = {};

Field.init = function () {

    Field.offsetx = 20;
    Field.offsety = 20;
    Field.blocksize = 10;
    Field.width = 20;
    Field.height = 40;

    Field.field = [];
    for (var x = 0; x < Field.width; x++) {
        var column = [];
        for (var y = 0; y < Field.height; y++) {
            column.push({
                show: false,
                color: 0
            });
        }
        Field.field.push(column);
    }
};

Field.render = function () {
    for (var x = 0; x < Field.width; x++) {
        for (var y = 0; y < Field.height; y++) {
            if (Field.field[x][y].show == true) {
                App.ctx.beginPath();
                App.ctx.lineWidth = "3";
                App.ctx.strokeStyle = Field.field[x][y].color;

                App.ctx.rect(x * Field.blocksize + Field.offsetx, (Field.height - 1) * Field.blocksize + Field.offsety - y * Field.blocksize, Field.blocksize, Field.blocksize);
                App.ctx.stroke();
            }
        }
    }

    App.ctx.beginPath();
    App.ctx.lineWidth = "1";
    App.ctx.strokeStyle = "black";
    App.ctx.rect(Field.offsetx, Field.offsety, Field.width * Field.blocksize, Field.height * Field.blocksize);
    App.ctx.stroke();
};

module.exports = Field;

},{"./App.js":1}],4:[function(require,module,exports){
'use strict';

var Field = require('./Field.js');
var App = require('./App.js');
var Boxes = require('./Boxes.js');
var Game = {};

Game.player = {};

Game.start = function () {
    setInterval(this.tick, 50);
    setInterval(function () {
        Game.movePlayer(0, -1);
    }, 1000);
    document.addEventListener("keydown", function (e) {
        if (e.keyCode == '40') {
            // down arrow
            Game.movePlayer(0, -1);
        } else if (e.keyCode == '37') {
            // left arrow
            Game.movePlayer(-1, 0);
        } else if (e.keyCode == '39') {
            // right arrow
            Game.movePlayer(1, 0);
        } else if (e.keyCode == '38') {
            // up arrow
            Game.spawn();
        } else if (e.keyCode == '32') {
            // press space to flip boxes

            // prevent scrolling
            e.preventDefault();
            var flip = Array.from(Game.player.figure);
            for (var i = 0; i < 4; i++) {
                // Koordinate im Spielfeld setzen
                Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
                    show: false,
                    color: "green"
                };
                Game.player.figure[i] = {
                    x: 0 - flip[i].y,
                    y: flip[i].x
                };
            }
            // damit das Spielfeld direkt geupdatet wird
            Game.movePlayer(0, 0);
        }
    });
};

Game.tick = function () {
    Game.update();
    Game.render();
};

Game.render = function () {
    App.ctx.clearRect(0, 0, App.canvas.width, App.canvas.height);
    Field.render();
};

Game.update = function () {};

Game.spawn = function () {
    var spawnpoint = { x: Math.floor(Field.width / 2) - 1, y: Field.height - 1 };
    Game.player.position = spawnpoint;
    // eine zufällige Figur auswählen
    var index = Math.floor(Math.random() * Boxes.length);
    var figure = Array.from(Boxes[index]);
    Game.player.figure = figure;

    var r = Math.floor(Math.random() * 256);
    var g = Math.floor(Math.random() * 256);
    var b = Math.floor(Math.random() * 256);

    Game.player.color = 'rgb(' + r + ',' + g + ',' + b + ')';

    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[spawnpoint.x - figure[i].x][spawnpoint.y - figure[i].y] = {
            show: true,
            color: Game.player.color
        };
    }
};

Game.movePlayer = function (x, y) {

    //Test if box would be still in field
    for (var i = 0; i < 4; i++) {
        if (Game.player.position.x - Game.player.figure[i].x + x < 0 || Game.player.position.x - Game.player.figure[i].x + x >= Field.width) {
            x = 0;
        } else if (Game.player.position.y - Game.player.figure[i].y + y < 0) {
            Game.spawn();
            return;
        }
    }
    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
            show: false,
            color: "green"
        };
    }

    //Test if box would collide with other boxes
    for (var i = 0; i < 4; i++) {
        if (Field.field[Game.player.position.x - Game.player.figure[i].x + x][Game.player.position.y - Game.player.figure[i].y + y].show == true) {
            this.x = 0;
            this.y = 0;
            for (var j = 0; j < 4; j++) {
                Field.field[Game.player.position.x - Game.player.figure[j].x][Game.player.position.y - Game.player.figure[j].y] = {
                    show: true,
                    color: Game.player.color
                };
            }
            Game.spawn();
            return;
        }
    }

    Game.player.position.y += y;
    Game.player.position.x += x;
    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
            show: true,
            color: Game.player.color
        };
    }
};

module.exports = Game;

},{"./App.js":1,"./Boxes.js":2,"./Field.js":3}],5:[function(require,module,exports){
'use strict';

var Game = require('./Game.js');
var App = require('./App.js');
var Field = require('./Field.js');

App.init();
Field.init();

Game.spawn();

Game.start();

},{"./App.js":1,"./Field.js":3,"./Game.js":4}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
