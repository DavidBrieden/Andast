(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var App = {};

App.init = function () {
    this.canvas = document.getElementById("canvas");
    this.canvas.width = 800;
    this.canvas.height = 600;
    this.ctx = this.canvas.getContext("2d");
};

module.exports = App;

},{}],2:[function(require,module,exports){
'use strict';

var App = require('./App.js');
var Field = require('./Field.js');
var Scoreboard = require('./Scoreboard.js');
var Boxes = require('./Boxes.js');

var BlockDisplay = {};

BlockDisplay.nextBlock = 3;

BlockDisplay.init = function () {
    this.offsety = 20;
    this.blocksize = 20;
    this.width = Scoreboard.width;
};

BlockDisplay.render = function () {
    //render display outline
    App.ctx.beginPath();
    App.ctx.lineWidth = "1";
    App.ctx.strokeStyle = "black";
    App.ctx.fillStyle = "black";

    var boardX = Field.offsetx + Field.width * Field.blocksize + Scoreboard.offsetx;
    var boardY = Field.offsety + Scoreboard.offsety + Scoreboard.height + this.offsety;

    App.ctx.rect(boardX, boardY, this.width, this.width);

    App.ctx.stroke();

    //render next block
    var box = Boxes[BlockDisplay.nextBlock];
    for (var i = 0; i < 4; i++) {
        App.ctx.beginPath();
        App.ctx.rect(boardX + this.width / 2 + box[i].x * this.blocksize, boardY + this.width / 2 + box[i].y * this.blocksize, BlockDisplay.blocksize, BlockDisplay.blocksize);
        App.ctx.stroke();
    }
};

module.exports = BlockDisplay;

},{"./App.js":1,"./Boxes.js":3,"./Field.js":4,"./Scoreboard.js":6}],3:[function(require,module,exports){
"use strict";

var boxes = [];

// X
//XXX
boxes.push([{ x: -1, y: 0 }, { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }]);
//XX
// XX
boxes.push([{ x: -1, y: 1 }, { x: 0, y: 1 }, { x: 0, y: 0 }, { x: 1, y: 0 }]);
//XX
//XX
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]);
//X
//X
//X
//X
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }, { x: 0, y: -1 }]);
//X
//X
//XX
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: -1 }]);
// X
// X
//XX
boxes.push([{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: 1, y: -1 }]);
// XX
//XX
boxes.push([{ x: -1, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]);

module.exports = boxes;

},{}],4:[function(require,module,exports){
"use strict";

var App = require("./App.js");

var Field = {};

Field.init = function () {

    Field.offsetx = 20;
    Field.offsety = 20;
    Field.blocksize = 15;
    Field.width = 20;
    Field.height = 35;

    Field.field = [];
    for (var x = 0; x < Field.width; x++) {
        var column = [];
        for (var y = 0; y < Field.height; y++) {
            column.push({
                show: false,
                color: 0
            });
        }
        Field.field.push(column);
    }
};

Field.render = function () {
    for (var x = 0; x < Field.width; x++) {
        for (var y = 0; y < Field.height; y++) {
            if (Field.field[x][y].show == true) {
                App.ctx.beginPath();
                App.ctx.lineWidth = "3";
                App.ctx.strokeStyle = Field.field[x][y].color;
                App.ctx.fillStyle = "black";

                App.ctx.fillRect(x * Field.blocksize + Field.offsetx, (Field.height - 1) * Field.blocksize + Field.offsety - y * Field.blocksize, Field.blocksize, Field.blocksize);

                App.ctx.fillStyle = Field.field[x][y].color;

                App.ctx.fillRect(x * Field.blocksize + Field.offsetx + Field.blocksize / 10, (Field.height - 1) * Field.blocksize + Field.offsety - y * Field.blocksize + Field.blocksize / 10, Field.blocksize / 10 * 8, Field.blocksize / 10 * 8);

                App.ctx.stroke();
            }
        }
    }

    App.ctx.beginPath();
    App.ctx.lineWidth = "1";
    App.ctx.strokeStyle = "black";
    App.ctx.rect(Field.offsetx, Field.offsety, Field.width * Field.blocksize, Field.height * Field.blocksize);
    App.ctx.stroke();
};

module.exports = Field;

},{"./App.js":1}],5:[function(require,module,exports){
'use strict';

var Field = require('./Field.js');
var App = require('./App.js');
var Boxes = require('./Boxes.js');
var Scoreboard = require('./Scoreboard.js');
var BlockDisplay = require('./BlockDisplay.js');
var Game = {};

Game.speed = 1000;
Game.nextSpawn = Math.floor(Math.random() * Boxes.length);

Game.player = {};

Game.start = function () {
    setInterval(this.tick, 50);
    Game.interval = setInterval(function () {
        Game.movePlayer(0, -1);
    }, Game.speed);
    setInterval(function () {
        Game.setSpeed(Game.speed * 0.9);
    }, 10000);

    document.addEventListener("keydown", function (e) {
        if (e.keyCode == '40') {
            // down arrow
            Game.movePlayer(0, -1);
        } else if (e.keyCode == '37') {
            // left arrow
            Game.movePlayer(-1, 0);
        } else if (e.keyCode == '39') {
            // right arrow
            Game.movePlayer(1, 0);
        } else if (e.keyCode == '38') {
            // up arrow
            Game.spawn();
        } else if (e.keyCode == '32') {
            // press space to flip boxes

            // prevent scrolling
            e.preventDefault();
            Game.flip();
        }
    });
};

Game.setSpeed = function (speed) {
    window.clearInterval(Game.interval);
    Game.speed = speed;
    Game.interval = setInterval(function () {
        Game.movePlayer(0, -1);
    }, Game.speed);
};

Game.tick = function () {
    Game.update();
    Game.render();
};

Game.render = function () {
    App.ctx.clearRect(0, 0, App.canvas.width, App.canvas.height);
    Field.render();
    Scoreboard.render();
    BlockDisplay.render();
};

Game.update = function () {};

Game.spawn = function () {
    var spawnpoint = { x: Math.floor(Field.width / 2) - 1, y: Field.height - 3 };
    Game.player.position = spawnpoint;
    // eine zufällige Figur auswählen
    var index = Game.nextSpawn;
    Game.nextSpawn = Math.floor(Math.random() * Boxes.length);
    BlockDisplay.nextBlock = Game.nextSpawn;
    var figure = Array.from(Boxes[index]);
    Game.player.figure = figure;

    var r = Math.floor(Math.random() * 256);
    var g = Math.floor(Math.random() * 256);
    var b = Math.floor(Math.random() * 256);

    Game.player.color = 'rgb(' + r + ',' + g + ',' + b + ')';

    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[spawnpoint.x - figure[i].x][spawnpoint.y - figure[i].y] = {
            show: true,
            color: Game.player.color
        };
    }
};

Game.testRow = function (y) {
    for (var i = 0; i < Field.width; i++) {
        if (Field.field[i][y].show == false) return false;
    }
    return true;
};

Game.deleteRow = function (y) {
    //delete full row
    for (var i = 0; i < Field.width; i++) {
        Field.field[i][y].show = false;
    }

    //move upper rows
    for (var i = y + 1; i < Field.height; i++) {
        for (var j = 0; j < Field.width; j++) {
            Field.field[j][i - 1] = Field.field[j][i];
        }
    }
};

Game.detectCollision = function (x, y) {
    for (var i = 0; i < 4; i++) {
        if (Game.player.position.x - Game.player.figure[i].x + x < 0 || Game.player.position.x - Game.player.figure[i].x + x >= Field.width) {
            //collision occurs during x axis movement
            return true;
        } else if (Game.player.position.y - Game.player.figure[i].y + y < 0) {
            //collision occurs during down movement
            return true;
        } else if (Field.field[Game.player.position.x - Game.player.figure[i].x + x][Game.player.position.y - Game.player.figure[i].y + y].show == true) {
            //collision with other block
            return true;
        }
    }
    return false;
};

Game.flip = function () {
    var flip = Array.from(Game.player.figure);
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
            show: false,
            color: "green"
        };
        Game.player.figure[i] = {
            x: 0 - flip[i].y,
            y: flip[i].x
        };
        /*if (Field.field[Game.player.position.x-x][Game.player.position.y - y].show==true){
            Game.player.figure = flip;
        }*/
    }
    if (Game.detectCollision(0, 0)) {
        Game.player.figure = Array.from(flip);
    }
    // damit das Spielfeld direkt geupdatet wird
    Game.movePlayer(0, 0);
};

Game.movePlayer = function (x, y) {

    var spawn = false;

    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
            show: false,
            color: "green"
        };
    }

    if (Game.detectCollision(x, y) == true) {
        if (x != 0) {
            x = 0;
        } else if (y != 0) {
            y = 0;
            spawn = true;
        }
    }

    Game.player.position.y += y;
    Game.player.position.x += x;
    // Jede Koordinate der gewählten Figur iterieren
    for (var i = 0; i < 4; i++) {
        // Koordinate im Spielfeld setzen
        Field.field[Game.player.position.x - Game.player.figure[i].x][Game.player.position.y - Game.player.figure[i].y] = {
            show: true,
            color: Game.player.color
        };
    }

    if (spawn == true) {
        //test if Row is full
        for (var i = 0; i < 4; i++) {
            if (Game.testRow(Game.player.position.y - Game.player.figure[i].y) == true) {
                Game.deleteRow(Game.player.position.y - Game.player.figure[i].y);
                Scoreboard.score += 100;
            }
        }
        spawn = false;
        Game.spawn();
    }
};

module.exports = Game;

},{"./App.js":1,"./BlockDisplay.js":2,"./Boxes.js":3,"./Field.js":4,"./Scoreboard.js":6}],6:[function(require,module,exports){
'use strict';

var App = require('./App.js');
var Field = require('./Field.js');

var Scoreboard = {};

Scoreboard.init = function () {
    this.offsetx = 20;
    this.offsety = 0;
    this.width = 170;
    this.height = 50;

    this.score = 0;

    this.fontsize = 30;
};

Scoreboard.render = function () {
    App.ctx.beginPath();
    App.ctx.lineWidth = "1";
    App.ctx.strokeStyle = "black";
    App.ctx.fillStyle = "black";

    var boardX = Field.offsetx + Field.width * Field.blocksize + this.offsetx;
    var boardY = Field.offsety + this.offsety;

    App.ctx.rect(boardX, boardY, this.width, this.height);

    App.ctx.font = this.fontsize + "px Comic Sans MS";
    App.ctx.textAlign = "center";
    App.ctx.textBaseline = "middle";
    App.ctx.fillText(this.score, boardX + this.width / 2, boardY + this.height / 2);

    App.ctx.stroke();
};

module.exports = Scoreboard;

},{"./App.js":1,"./Field.js":4}],7:[function(require,module,exports){
'use strict';

var Game = require('./Game.js');
var App = require('./App.js');
var Field = require('./Field.js');
var Scoreboard = require('./Scoreboard.js');
var BlockDisplay = require('./BlockDisplay.js');

App.init();
Field.init();
Scoreboard.init();
BlockDisplay.init();

Game.spawn();

Game.start();

},{"./App.js":1,"./BlockDisplay.js":2,"./Field.js":4,"./Game.js":5,"./Scoreboard.js":6}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
